fit <- stan(file='gp3_cust_cov.stan', data=data, seed=5838298)
check_all_diagnostics(fit)
# fit <- stan(file='gp3.stan', data=data, seed=5838298)
fit <- stan(file='gp3_cust_cov.stan', data=data, seed=5838298)
# fit <- stan(file='gp3.stan', data=data, seed=5838298)
fit <- stan(file='gp3_cust_cov.stan', data=data, seed=5838298)
# fit <- stan(file='gp3.stan', data=data, seed=5838298)
fit <- stan(file='gp3_cust_cov.stan', data=data, seed=5838298)
check_all_diagnostics(fit)
# fit <- stan(file='gp3.stan', data=data, seed=5838298)
fit <- stan(file='gp3_cust_cov.stan', data=data, seed=5838298)
check_all_diagnostics(fit)
params <- extract(fit)
par(mfrow=c(1, 3))
alpha_breaks=10 * (0:50) / 50 - 5
hist(params$alpha, main="", xlab="alpha",
col=c_dark, border=c_dark_highlight, yaxt='n')
abline(v=3, col=c_light, lty=1, lwd=3)
beta_breaks=10 * (0:50) / 50 - 5
hist(params$rho, main="", xlab="rho",
col=c_dark, border=c_dark_highlight, yaxt='n')
abline(v=5.5, col=c_light, lty=1, lwd=3)
sigma_breaks=5 * (0:50) / 50
hist(params$sigma, main="", xlab="sigma",
col=c_dark, border=c_dark_highlight, yaxt='n')
abline(v=2, col=c_light, lty=1, lwd=3)
# fit <- stan(file='gp3.stan', data=data, seed=5838298)
fit <- stan(file='gp3_cust_cov.stan', data=data, seed=5838298)
# fit <- stan(file='gp3.stan', data=data, seed=5838298)
fit <- stan(file='gp3_cust_cov.stan', data=data, seed=5838298)
# fit <- stan(file='gp3.stan', data=data, seed=5838298)
fit <- stan(file='gp3_cust_cov.stan', data=data, seed=5838298)
# fit <- stan(file='gp3.stan', data=data, seed=5838298)
fit <- stan(file='gp3_cust_cov.stan', data=data, seed=5838298)
# fit <- stan(file='gp3.stan', data=data, seed=5838298)
fit <- stan(file='gp3_cust_cov.stan', data=data, seed=5838298)
# fit <- stan(file='gp3.stan', data=data, seed=5838298)
fit <- stan(file='gp3_cust_cov.stan', data=data, seed=5838298)
commentr::block_comment("Rendering HTML")
commentr::block_comment("Rendering Plot")
commentr::block_comment("End Shiny Server")
shiny::runApp('C:/Users/mtkur/Dropbox/Coding & Data Projects/Yash_Programming_Party/Shiny_Diet_Calculator/data')
target_loss_per_week
as.numeric(lubridate::today(tzone = "") - lubridate::ymd(initdata$Date[nrow(initdata)]))
initdata$Date %>% tail(1)
initdata$Date %<>% lubridate(ymd)
(DetermineDeficitCals(curr_weight,
target_loss_per_week,
curr_BF*0.01))/7
# Computations
current_weight_kgs = current_weight_lbs / 2.2
summarytext
summarytext = paste("Last Recorded Weight :<strong>" , format(curr_weight, digit = 3), "</strong><br>",
"Weight Change in the last week :<strong>", format(curr_weight - one_weekWeight, digit = 3), "</strong><br>",
"Weight Change in the last 2 weeks :<strong>", format(curr_weight - two_weekWeight, digit = 3), "</strong><br><br>",
"Last Recorded BF :<strong>" , format(curr_BF, digit = 3), "</strong><br>",
"BF Change in the last week :<strong>", format(curr_BF - one_weekBF, digit = 3), "</strong><br>",
"BF Change in the last 2 weeks :<strong>", format(curr_BF - two_weekBF, digit = 3), "</strong>")
commentr::block_comment("Misc Functions")
dir = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(dir)
# Read in the files
initdata = read.csv(file = "FLF_output_table.csv", header=TRUE, sep = ",")
curr_weight = initdata$Weight[nrow(initdata)]
one_weekWeight = initdata$Weight[nrow(initdata)-7]
two_weekWeight = initdata$Weight[nrow(initdata)-14]
curr_BF = initdata$PredictedBF[nrow(initdata)]
one_weekBF = initdata$PredictedBF[nrow(initdata)-7]
two_weekBF = initdata$PredictedBF[nrow(initdata)-14]
summarytext = paste("Last Recorded Weight :<strong>" , format(curr_weight, digit = 3), "</strong><br>",
"Weight Change in the last week :<strong>", format(curr_weight - one_weekWeight, digit = 3), "</strong><br>",
"Weight Change in the last 2 weeks :<strong>", format(curr_weight - two_weekWeight, digit = 3), "</strong><br><br>",
"Last Recorded BF :<strong>" , format(curr_BF, digit = 3), "</strong><br>",
"BF Change in the last week :<strong>", format(curr_BF - one_weekBF, digit = 3), "</strong><br>",
"BF Change in the last 2 weeks :<strong>", format(curr_BF - two_weekBF, digit = 3), "</strong>")
summarytext
commentr::block_comment("Begin Shiny Server")
runApp()
initdata$Date %<>% lubridate::ymd()
days_since_weighin = as.numeric(lubridate::today(tzone = "") - initdata$Date %>% tail(1))
cals_in_def = (DetermineDeficitCals(curr_weight,
target_loss_per_week,
curr_BF*0.01))/7
g_protein_needed = Determinegrams(curr_weight, target_loss_per_week, curr_BF*0.01)
initdata$Date
days_since_weighin
cals_in_def
calorie_change
calorie_change = Compute_Calorie_Control_Linear(days_since_last_weighin = days_since_weighin,
kgs_per_week = target_loss_per_week,
grams_protein = ,
beginning_weight_kg = initdata$Weight[nrow(initdata)-1],
ending_weight_kg = curr_weight,
beginning_bf = initdata$PredictedBF[nrow(initdata)-1],
ending_bf = curr_BF,
calories_in_deficit = cals_in_def,
grams_protein = g_protein_needed)
calorie_change
g_protein_needed
g_protein_needed / 7
runApp()
avg
lean_body_mass
body_weight
percent_fat
height
age
activity_factor
adjustment
avg
runApp()
runApp()
runApp()
body_weight
body_weight = body_weight / 2.2
target_loss_per_week
percent_fat
body_weight = body_weight / 2.2
grams_lost_per_week = body_weight * target_loss_per_week * 1000
grams_lost_per_week
loss_in_fat_per_week
loss_in_grams = grams_lost_per_week * (1 - loss_in_fat_per_week)
NON_WATER_LBM_LOST = 0.30 # 30 % of lbm is muscle and protein and 70 is water
grams_protein = NON_WATER_LBM_LOST * loss_in_grams
grams_protein
loss_in_grams = grams_lost_per_week * (1 - loss_in_fat_per_week)
loss_in_fat_per_week = DetermineLossInFat(percent_fat,
high_protein = TRUE,
weight_lifting = TRUE)
loss_in_grams = grams_lost_per_week * (1 - loss_in_fat_per_week)
NON_WATER_LBM_LOST = 0.30 # 30 % of lbm is muscle and protein and 70 is water
grams_protein = NON_WATER_LBM_LOST * loss_in_grams
3136/7
loss_in_fat_per_week
runApp()
runApp()
body_weight
body_weight
curr_weight
runApp()
body_weight
runApp()
runApp()
runApp()
runApp()
initdata = read.csv(file = "FLF_output_table.csv", header=TRUE, sep = ",")
curr_weight = initdata$Weight[nrow(initdata)] / 2.2
one_weekWeight = initdata$Weight[nrow(initdata)-7]
two_weekWeight = initdata$Weight[nrow(initdata)-14]
curr_BF = initdata$PredictedBF[nrow(initdata)]
one_weekBF = initdata$PredictedBF[nrow(initdata)-7]
two_weekBF = initdata$PredictedBF[nrow(initdata)-14]
two_weekWeight
runApp()
runApp()
initdata = read.csv(file = "FLF_output_table.csv", header=TRUE, sep = ",")
curr_weight = initdata$Weight[nrow(initdata)] / 2.2
two_weekWeight = initdata$Weight[nrow(initdata)-14] / 2.2
curr_BF = initdata$PredictedBF[nrow(initdata)]
one_weekBF = initdata$PredictedBF[nrow(initdata)-7]
one_weekWeight = initdata$Weight[nrow(initdata)-7] / 2.2
two_weekBF = initdata$PredictedBF[nrow(initdata)-14]
runApp()
runApp()
runApp()
calorie_change
# This function aims to compute the calorie adjustment given
# a variety of inputs
Compute_Calorie_Control_Linear <- function(days_since_last_weighin,
kgs_per_week,
beginning_weight_kg,
ending_weight_kg,
beginning_bf,
ending_bf,
calories_in_deficit,
grams_protein, percentage_adjustment_input = 0.08) {
# If one needs to see progress, layne suggests that they reduce
# the amount of calories that they eat from non-protein sources
# by somewhere between 5-15% (7-10% recommended) per week
percentage_adjustment = percentage_adjustment_input
kgs_lost_in_period = beginning_weight_kg - ending_weight_kg
# Compute the number of cals not from protein and compute the number
# of calories that one should subtract or add based on weightlost per week
calories_remaining = calories_in_deficit - 4 * grams_protein
calories_to_decrease_per_week = percentage_adjustment * calories_remaining
# Scale up the calories based on the number of days since the last weigh-in since
# Layne gives values as a weekly measure
cals_per_period = calories_to_decrease_per_week * days_since_last_weighin / 7
# Collar this amount to be somewhere between 15% of the total cals plus or minus
cals_per_period = median(c(.15 * calories_in_deficit, -0.15 * calories_in_deficit, cals_per_period))
# Use a linear prediction function with values of:
# -cals_per_period at zero kgs/ period lost (we need to subtract cals_per_period cals since we didn't move at all)
# 0 at exactly kgs_per_week lost (we predicted exactly right!)
# cals_per_period at 2 * kgs_per_week lost (we need to add cals since we lost too much weight)
predicted_change = cals_per_period / kgs_per_week * (kgs_lost_in_period - kgs_per_week)
# Collar the predicted change to be within (-cals_per_period,cals_per_period) to ensure we don't get wild swings
predicted_change = median(c(predicted_change, -cals_per_period, cals_per_period))
# Return the predicted change to the user
return(-predicted_change)
}
# Create a Test for no change
Compute_Calorie_Control_Linear(days_since_last_weighin = 7, kgs_per_week = 0.5,
beginning_weight_kg = 100.5,ending_weight_kg = 100,
beginning_bf = 14, ending_bf = 14,
calories_in_deficit = 2800,
grams_protein = 200, percentage_adjustment_input = 0.08)
# Create a test for a huge change and ensure it is bounded
Compute_Calorie_Control_Linear(days_since_last_weighin = 7, kgs_per_week = 0.5,
beginning_weight_kg = 105,ending_weight_kg = 100,
beginning_bf = 14, ending_bf = 14,
calories_in_deficit = 2800,
grams_protein = 200, percentage_adjustment_input = 0.08)
# Create a test for a huge negative change and ensure it is bounded
Compute_Calorie_Control_Linear(days_since_last_weighin = 7, kgs_per_week = 0.5,
beginning_weight_kg = 95,ending_weight_kg = 100,
beginning_bf = 14, ending_bf = 14,
calories_in_deficit = 2800,
grams_protein = 200, percentage_adjustment_input = 0.08)
target_loss_per_week
days_since_weighin
target_loss_per_week
initdata$Weight[nrow(initdata)-1]
days_since_weighin
initdata$Date %<>% lubridate::ymd()
days_since_weighin = as.numeric(lubridate::today(tzone = "") - initdata$Date %>% tail(1))
cals_in_def = (DetermineDeficitCals(curr_weight,
target_loss_per_week,
curr_BF*0.01))/7
g_protein_needed = Determinegrams(curr_weight, target_loss_per_week, curr_BF*0.01)
calorie_change = Compute_Calorie_Control_Linear(days_since_last_weighin = days_since_weighin,
kgs_per_week = target_loss_per_week_kgs,
beginning_weight_kg = initdata$Weight[nrow(initdata)-days_since_weighin] / 2.2,
ending_weight_kg = curr_weight,
beginning_bf = initdata$PredictedBF[nrow(initdata)-days_since_weighin] / 2.2,
ending_bf = curr_BF,
calories_in_deficit = cals_in_def,
grams_protein = g_protein_needed)
# Compute target Losses
target_loss_per_week_kgs = curr_weight
if(input$kgLossRate == "1") {target_loss_per_week = curr_weight * 0.008}
else if (input$kgLossRate == "2") {target_loss_per_week = curr_weight * 0.004}
else {target_loss_per_week = curr_weight * 0.012}
days_since_weighin = as.numeric(lubridate::today(tzone = "") - initdata$Date %>% tail(1))
runApp()
calorie_change
days_since_weighin
target_loss_per_week_kgs
runApp()
runApp()
calorie_change
days_since_weighin
target_loss_per_week_kgs
initdata$Weight[nrow(initdata)-days_since_weighin] / 2.2
curr_weight
initdata$PredictedBF[nrow(initdata)-days_since_weighin]
curr_BF
cals_in_def
curr_weight
target_loss_per_week_kgs
target_loss_per_week_kgs / curr_weight
curr_BF
curr_BF
(DetermineDeficitCals(curr_weight,
target_loss_per_week_kgs / curr_weight,
curr_BF*0.01))/7
curr_weight
curr_BF
curr_age = as.numeric(lubridate::today() - lubridate::make_date(1994,01,04))
curr_activity_factor = 1.55
TotalDailyEnergyExpend(body_weight = curr_weight,
percent_fat = curr_BF / 100,
height = curr_height,
age = curr_age,
activity_factor = curr_activity_factor,
adjustment = curr_activity_adjustment)
TotalDailyEnergyExpend(body_weight = curr_weight,
percent_fat = curr_BF / 100,
height = 70*2.54,
age = curr_age,
activity_factor = curr_activity_factor,
adjustment = curr_activity_adjustment)
runApp()
TotalDailyEnergyExpend(body_weight = curr_weight,
percent_fat = curr_BF / 100,
height = curr_height,
age = curr_age,
activity_factor = curr_activity_factor,
adjustment = curr_activity_adjustment)
curr_weight
curr_BF
curr_height
curr_age
runApp()
TotalDailyEnergyExpend(body_weight = curr_weight,
percent_fat = curr_BF / 100,
height = curr_height,
age = curr_age,
activity_factor = curr_activity_factor,
adjustment = curr_activity_adjustment)
(DetermineDeficitCals(curr_weight,
target_loss_per_week_kgs / curr_weight,
curr_BF*0.01))/7
TotalDailyEnergyExpend(body_weight = curr_weight,
percent_fat = curr_BF / 100,
height = curr_height,
age = curr_age,
activity_factor = curr_activity_factor,
adjustment = curr_activity_adjustment) -
(DetermineDeficitCals(curr_weight,
target_loss_per_week_kgs / curr_weight,
curr_BF*0.01))/7
runApp()
cals_in_def
runApp()
days_since_weighin
target_loss_per_week_kgs
initdata$Weight[nrow(initdata)-days_since_weighin] / 2.2
curr_weight
initdata$PredictedBF[nrow(initdata)-days_since_weighin]
curr_BF
cals_in_def
g_protein_needed
curr_weight
target_loss_per_week_kgs
curr_BF
runApp()
g_protein_needed
curr_weight
curr_BF
# 2.3 is the protein multipler while in a deficit
g_protein_needed = curr_weight * (1 - curr_BF/100) * 2.3
g_protein_needed
runApp()
runApp()
runApp()
runApp()
input$kgLossRate
runApp()
input$kgLossRate
runApp()
runApp()
cals_in_def
cals_in_def
cals_in_def
cals_in_def = TotalDailyEnergyExpend(body_weight = curr_weight,
percent_fat = curr_BF / 100,
height = curr_height,
age = curr_age,
activity_factor = curr_activity_factor,
adjustment = curr_activity_adjustment) -
(DetermineDeficitCals(curr_weight,
0.004 / curr_weight,
curr_BF*0.01))/7
cals_in_def
cals_in_def = TotalDailyEnergyExpend(body_weight = curr_weight,
percent_fat = curr_BF / 100,
height = curr_height,
age = curr_age,
activity_factor = curr_activity_factor,
adjustment = curr_activity_adjustment) -
(DetermineDeficitCals(curr_weight,
0.012 / curr_weight,
curr_BF*0.01))/7
cals_in_def
cals_in_def = TotalDailyEnergyExpend(body_weight = curr_weight,
percent_fat = curr_BF / 100,
height = curr_height,
age = curr_age,
activity_factor = curr_activity_factor,
adjustment = curr_activity_adjustment) -
(DetermineDeficitCals(curr_weight,
0.012,
curr_BF*0.01))/7
cals_in_def
cals_in_def = TotalDailyEnergyExpend(body_weight = curr_weight,
percent_fat = curr_BF / 100,
height = curr_height,
age = curr_age,
activity_factor = curr_activity_factor,
adjustment = curr_activity_adjustment) -
(DetermineDeficitCals(curr_weight,
0.008,
curr_BF*0.01))/7
cals_in_def
cals_in_def = TotalDailyEnergyExpend(body_weight = curr_weight,
percent_fat = curr_BF / 100,
height = curr_height,
age = curr_age,
activity_factor = curr_activity_factor,
adjustment = curr_activity_adjustment) -
(DetermineDeficitCals(curr_weight,
0.004,
curr_BF*0.01))/7
browser()
cals_in_def
runApp()
cals_in_def
runApp()
ldply(seq(97, 101, by = 0.1), function(i) {
result <- Compute_Calorie_Control_Linear(days_since_last_weighin = 7, kgs_per_week = 1,
beginning_weight_kg = 100, ending_weight_kg = i,
beginning_bf = 14, ending_bf = 14,
calories_in_deficit = 2800,
grams_protein = 200, percentage_adjustment_input = 0.08)
data.frame(x = i, calories = result)
}) %>%
ggplot() +
geom_hline(yintercept = 0, color = "red", linetype = 2) +
geom_line(aes(x, calories)) +
ggtitle("Amount of Calories to Add conditional on Kgs Lost", "Red point is expected loss at the end of the week of 100-1 = 99kgs") +
geom_point(aes(x = x, y = y), color = "red", data = data.frame(x = 99, y = 0), size = 2)
################################################################################
#                                                                              #
# A function for computing the linear approximation to the number of calories  #
# that should be lost in a given time_frame via a linear approximation that    #
# is collared to avoid drastic increases and decreases                         #
#                                                                              #
################################################################################
# This function aims to compute the calorie adjustment given
# a variety of inputs
Compute_Calorie_Control_Linear <- function(days_since_last_weighin,
kgs_per_week,
beginning_weight_kg,
ending_weight_kg,
beginning_bf,
ending_bf,
calories_in_deficit,
grams_protein, percentage_adjustment_input = 0.08) {
# If one needs to see progress, layne suggests that they reduce
# the amount of calories that they eat from non-protein sources
# by somewhere between 5-15% (7-10% recommended) per week
percentage_adjustment = percentage_adjustment_input
kgs_lost_in_period = beginning_weight_kg - ending_weight_kg
# Compute the number of cals not from protein and compute the number
# of calories that one should subtract or add based on weightlost per week
calories_remaining = calories_in_deficit - 4 * grams_protein
calories_to_decrease_per_week = percentage_adjustment * calories_remaining
# Scale up the calories based on the number of days since the last weigh-in since
# Layne gives values as a weekly measure
cals_per_period = calories_to_decrease_per_week * days_since_last_weighin / 7
# Collar this amount to be somewhere between 15% of the total cals plus or minus
cals_per_period = median(c(.15 * calories_in_deficit, -0.15 * calories_in_deficit, cals_per_period))
# Use a linear prediction function with values of:
# -cals_per_period at zero kgs/ period lost (we need to subtract cals_per_period cals since we didn't move at all)
# 0 at exactly kgs_per_week lost (we predicted exactly right!)
# cals_per_period at 2 * kgs_per_week lost (we need to add cals since we lost too much weight)
predicted_change = cals_per_period / kgs_per_week * (kgs_lost_in_period - kgs_per_week)
# Collar the predicted change to be within (-cals_per_period,cals_per_period) to ensure we don't get wild swings
predicted_change = median(c(predicted_change, -cals_per_period, cals_per_period))
# Return the predicted change to the user
return(-predicted_change)
}
################################################################################
#                                                                              #
#                              Testing Functions                               #
#                                                                              #
################################################################################
# Create a Test for no change
Compute_Calorie_Control_Linear(days_since_last_weighin = 7, kgs_per_week = 0.5,
beginning_weight_kg = 100.5,ending_weight_kg = 100,
beginning_bf = 14, ending_bf = 14,
calories_in_deficit = 2800,
grams_protein = 200, percentage_adjustment_input = 0.08)
# Create a test for a huge change and ensure it is bounded
Compute_Calorie_Control_Linear(days_since_last_weighin = 7, kgs_per_week = 0.5,
beginning_weight_kg = 105,ending_weight_kg = 100,
beginning_bf = 14, ending_bf = 14,
calories_in_deficit = 2800,
grams_protein = 200, percentage_adjustment_input = 0.08)
# Create a test for a huge negative change and ensure it is bounded
Compute_Calorie_Control_Linear(days_since_last_weighin = 7, kgs_per_week = 0.5,
beginning_weight_kg = 95,ending_weight_kg = 100,
beginning_bf = 14, ending_bf = 14,
calories_in_deficit = 2800,
grams_protein = 200, percentage_adjustment_input = 0.08)
# Ensure values are symmetric about desired point
Compute_Calorie_Control_Linear(days_since_last_weighin = 7, kgs_per_week = 1,
beginning_weight_kg = 99.5, ending_weight_kg = 100,
beginning_bf = 14, ending_bf = 14,
calories_in_deficit = 2800,
grams_protein = 200, percentage_adjustment_input = 0.08)
################################################################################
#                                                                              #
#                      Plotting the Expectation Function                       #
#                                                                              #
################################################################################
ldply(seq(97, 101, by = 0.1), function(i) {
result <- Compute_Calorie_Control_Linear(days_since_last_weighin = 7, kgs_per_week = 1,
beginning_weight_kg = 100, ending_weight_kg = i,
beginning_bf = 14, ending_bf = 14,
calories_in_deficit = 2800,
grams_protein = 200, percentage_adjustment_input = 0.08)
data.frame(x = i, calories = result)
}) %>%
ggplot() +
geom_hline(yintercept = 0, color = "red", linetype = 2) +
geom_line(aes(x, calories)) +
ggtitle("Amount of Calories to Add conditional on Kgs Lost", "Red point is expected loss at the end of the week of 100-1 = 99kgs") +
geom_point(aes(x = x, y = y), color = "red", data = data.frame(x = 99, y = 0), size = 2)
runApp()
calorie_change
days_since_weighin
curr_weight * multiplier
runApp()
runApp()
runApp()
program_mode
program_mode %in% c("Slow", "Medium", "Aggressive", "Select Pace")
runApp()
runApp()
runApp()
runApp()
